给定一个二叉搜索树的根节点 root 和一个值 key，删除二叉搜索树中的 key 对应的节点，并保证二叉搜索树的性质不变。返回二叉搜索树（有可能被更新）的根节点的引用。

一般来说，删除节点可分为两个步骤：

首先找到需要删除的节点；
如果找到了，删除它。


输入：root = [5,3,6,2,4,null,7], key = 3
输出：[5,4,6,2,null,null,7]
解释：给定需要删除的节点值是 3，所以我们首先找到 3 这个节点，然后删除它。
一个正确的答案是 [5,4,6,2,null,null,7], 如下图所示。
另一个正确答案是 [5,2,6,null,4,null,7]。


递归：
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode deleteNode(TreeNode root, int key) {
        if(root==null) return root;
        if(root.val==key){
            if(root.left==null) return root.right;
            else if(root.right==null) return root.left;
            else{
                TreeNode cur=root.right;
                while(cur.left!=null){
                    cur=cur.left;
            
                }
                cur.left=root.left;
                TreeNode tem=root;
                root=root.right;
                return root;
            }
        }
        if(root.val>key) root.left=deleteNode(root.left,key);
        if(root.val<key) root.right=deleteNode(root.right,key);
        return root;

    }
}


迭代：
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode deleteNode(TreeNode root, int key) {
        if(root==null) return root;
        TreeNode cur=root;
        TreeNode pre=null;
        while(cur!=null){
            if(cur.val==key) break;
            pre=cur;
            if(cur.val>key) cur=cur.left;
            else cur=cur.right;
        }

        if(pre==null) return find(cur);
        if(pre.left!=null&&pre.left.val==key) pre.left=find(cur);
        if(pre.right!=null&&pre.right.val==key) pre.right=find(cur);
        return root;

    }
    private TreeNode find(TreeNode target){
        if(target==null) return target;
        if(target.right==null) return target.left;
        TreeNode cur=target.right;
        while(cur.left!=null){
            cur=cur.left;
        }
        cur.left=target.left;
        return target.right;

    }
}

