/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        if(root==null) return new ArrayList<List<Integer>>();
        List<List<Integer>> ans=new ArrayList<List<Integer>>();
        Queue<TreeNode> queue=new LinkedList<TreeNode>();
        queue.offer(root);
       
        while(!queue.isEmpty()){
            List<Integer> itemans=new ArrayList<Integer>();
            int len=queue.size();
            while(len>0){
                TreeNode temNode=queue.poll();
                itemans.add(temNode.val);
                if(temNode.left!=null) queue.offer(temNode.left);
                if(temNode.right!=null) queue.offer(temNode.right);
                len--;
            }
            ans.add(itemans);
        }
        Collections.reverse(ans);
        return ans;


    }
}
